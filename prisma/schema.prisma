// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified Boolean        @default(false)
  image         String?
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  favoriteIds   String[]       @db.ObjectId
  cartDocument  CartDocument[] @relation("CartDocumenttoUser")
  activateTokens      ActivateToken[]
  activateResetTokens ActivateResetToken[]
  products Product[] @relation("UserToProduct") //isso est√° correto?
  role UserRole @default(USER)
  accounts Account[]
  orders Order[]
  reviews ReviewDocument[] @relation("ReviewDocumenttoUser")
  histories History[] @relation("UserToHistory")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ActivateToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  expireAt    DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model ActivateResetToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  expireAt    DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

////////////////////////////////////////////////////////////////

model Product {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  bulletPoints BulletPoint[] @relation("BulletPointsToProduct")
  thumbnails   Thumbnail[]   @relation("ThumbnailToProduct") // Renamed to plural for better representation of multiple thumbnails
  images       Image[]       @relation("ImagesToProduct")
  price        Json
  sale         Float
  quantity     Int
  category     String
  user         User          @relation("UserToProduct", fields: [userId], references: [id])
  userId       String        @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cartItem     CartItem[]    @relation("CartItemtoProduct")
  reviews      ReviewDocument[] @relation("ReviewDocumenttoProduct")
  rating       Int?
  histories    History[]      @relation("ProductToHistory")
}

model Thumbnail {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  publicId  String
  productId String  @db.ObjectId
  product   Product @relation("ThumbnailToProduct", fields: [productId], references: [id])
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  publicId  String
  productId String  @db.ObjectId
  product   Product @relation("ImagesToProduct", fields: [productId], references: [id])
}

model BulletPoint {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  productId String  @db.ObjectId
  product   Product @relation("BulletPointsToProduct", fields: [productId], references: [id])
}

model CartItem {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  quantity       Int
  productId      String       @db.ObjectId
  product        Product      @relation("CartItemtoProduct", fields: [productId], references: [id])
  cartDocument   CartDocument @relation("CartDocumenttoCartItem", fields: [cartDocumentId], references: [id])
  cartDocumentId String       @db.ObjectId
}

model CartDocument {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[] @relation("CartDocumenttoCartItem")
  user      User       @relation("CartDocumenttoUser", fields: [userId], references: [id])
}

model FeaturedProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  link      String
  linkTitle String
  title     String
  url       String
  publicId  String
  createdAt DateTime @default(now())
}

////// orders

model Order {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  userId           String            @db.ObjectId
  stripeCustomerId String
  paymentIntent    String
  totalAmount      Float
  paymentStatus    String
  deliveryStatus   DeliveryStatus    @default(ORDERED)
  createdAt        DateTime          @default(now())
  user             User              @relation(fields: [userId], references: [id])
  shippingDetails  ShippingDetails[] @relation("ShippingDetailsToOrder")
  orderItems       OrderItem[]       @relation("OrderItemToOrder")
}

enum DeliveryStatus {
  DELIVERED
  ORDERED
  SHIPPED
}

model ShippingDetails {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId String?   @db.ObjectId
  address Address[] @relation("AddressToShippingDetails")
  email   String
  name    String
  order   Order?    @relation("ShippingDetailsToOrder", fields: [orderId], references: [id])
}

model Address {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  shippingId String          @db.ObjectId
  city       String
  country    String
  line1      String
  line2      String?
  postalCode String
  state      String
  shipping   ShippingDetails @relation("AddressToShippingDetails", fields: [shippingId], references: [id])
}

model OrderItem {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String @db.ObjectId
  title      String
  thumbnail  String
  totalPrice Float
  price      Float
  qty        Int
  order      Order  @relation("OrderItemToOrder", fields: [orderId], references: [id])
}

/// Review
model ReviewDocument {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  product    Product  @relation("ReviewDocumenttoProduct", fields: [productId], references: [id])
  productId  String   @db.ObjectId
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  @@unique([userId, productId]) // Ensures that each user can only have one review for each product
  user       User     @relation("ReviewDocumenttoUser", fields: [userId], references: [id])
}

//// History Document

model History {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  ownerId    String    @db.ObjectId
  productId  String    @db.ObjectId
  date       DateTime  @default(now())
  owner      User      @relation("UserToHistory", fields: [ownerId], references: [id])
  product    Product   @relation("ProductToHistory", fields: [productId], references: [id])
  
  @@unique([ownerId, productId])
}

